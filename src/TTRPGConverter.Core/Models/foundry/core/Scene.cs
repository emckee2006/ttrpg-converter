//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


#nullable enable


namespace TTRPGConverter.Core.Models.Foundry.Core
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Document ownership permissions by user role
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Ownership
    {

        /// <summary>
        /// Default permission level (0=None, 1=Limited, 2=Observer, 3=Owner)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("default")]
        public OwnershipDefault? Default { get; set; } = default!;

    }

    /// <summary>
    /// Document creation/modification metadata
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class DocumentStats
    {

        /// <summary>
        /// Game system ID
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("systemId")]
        public string? SystemId { get; set; } = default!;

        /// <summary>
        /// Game system version
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("systemVersion")]
        public string? SystemVersion { get; set; } = default!;

        /// <summary>
        /// Foundry core version
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("coreVersion")]
        public string? CoreVersion { get; set; } = default!;

        /// <summary>
        /// Creation timestamp (Unix milliseconds)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("createdTime")]
        public double? CreatedTime { get; set; } = default!;

        /// <summary>
        /// Last modification timestamp (Unix milliseconds)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("modifiedTime")]
        public double? ModifiedTime { get; set; } = default!;

        /// <summary>
        /// User ID who last modified
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z0-9]{16}$")]
        public string? LastModifiedBy { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Common properties shared by all Foundry VTT documents
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class BaseDocument
    {

        /// <summary>
        /// Unique 16-character document ID
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z0-9]{16}$")]
        public string _id { get; set; } = default!;

        /// <summary>
        /// Document name
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Parent folder ID, null if in root
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("folder")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z0-9]{16}$")]
        public string? Folder { get; set; } = default!;

        /// <summary>
        /// Sort order for display
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("sort")]
        public double? Sort { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ownership")]
        public Ownership? Ownership { get; set; } = default!;

        /// <summary>
        /// Module/system-specific flags
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("flags")]
        public object? Flags { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("_stats")]
        public DocumentStats? _stats { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// X/Y coordinate position
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Position
    {

        [System.Text.Json.Serialization.JsonPropertyName("x")]
        public double? X { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("y")]
        public double? Y { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Schema for Foundry VTT scene documents (system-agnostic)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Json : BaseDocument
    {

        /// <summary>
        /// Whether this is the active scene
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("active")]
        public bool? Active { get; set; } = default!;

        /// <summary>
        /// Whether scene appears in navigation bar
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("navigation")]
        public bool? Navigation { get; set; } = default!;

        /// <summary>
        /// Navigation bar sort order
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("navOrder")]
        public double? NavOrder { get; set; } = default!;

        /// <summary>
        /// Scene thumbnail image
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("img")]
        public System.Uri? Img { get; set; } = default!;

        /// <summary>
        /// Foreground overlay image
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("foreground")]
        public System.Uri? Foreground { get; set; } = default!;

        /// <summary>
        /// Navigation thumbnail
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("thumb")]
        public System.Uri? Thumb { get; set; } = default!;

        /// <summary>
        /// Scene width in pixels
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("width")]
        [System.ComponentModel.DataAnnotations.Range(100D, double.MaxValue)]
        public double? Width { get; set; } = default!;

        /// <summary>
        /// Scene height in pixels
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("height")]
        [System.ComponentModel.DataAnnotations.Range(100D, double.MaxValue)]
        public double? Height { get; set; } = default!;

        /// <summary>
        /// Scene boundary padding
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("padding")]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double? Padding { get; set; } = default!;

        /// <summary>
        /// Initial view position
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("initial")]
        public Position? Initial { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("backgroundColor")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^#[0-9a-fA-F]{6}$")]
        public string? BackgroundColor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("grid")]
        public Grid? Grid { get; set; } = default!;

        /// <summary>
        /// Whether token vision is enabled
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("tokenVision")]
        public bool? TokenVision { get; set; } = default!;

        /// <summary>
        /// Whether fog exploration is enabled
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("fogExploration")]
        public bool? FogExploration { get; set; } = default!;

        /// <summary>
        /// Timestamp of last fog reset
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("fogReset")]
        public double? FogReset { get; set; } = default!;

        /// <summary>
        /// Whether global illumination is enabled
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("globalLight")]
        public bool? GlobalLight { get; set; } = default!;

        /// <summary>
        /// Global light darkness threshold
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("globalLightThreshold")]
        [System.ComponentModel.DataAnnotations.Range(0D, 1D)]
        public double? GlobalLightThreshold { get; set; } = default!;

        /// <summary>
        /// Scene darkness level
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("darkness")]
        [System.ComponentModel.DataAnnotations.Range(0D, 1D)]
        public double? Darkness { get; set; } = default!;

        /// <summary>
        /// Background playlist sound ID
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("playlistSound")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z0-9]{16}$")]
        public string? PlaylistSound { get; set; } = default!;

        /// <summary>
        /// Scene playlist ID
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("playlist")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z0-9]{16}$")]
        public string? Playlist { get; set; } = default!;

        /// <summary>
        /// Associated journal entry ID
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("journal")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z0-9]{16}$")]
        public string? Journal { get; set; } = default!;

        /// <summary>
        /// Weather conditions
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("weather")]
        public string? Weather { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum OwnershipDefault
    {

        _0 = 0,


        _1 = 1,


        _2 = 2,


        _3 = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Grid
    {

        /// <summary>
        /// Grid type: 0=None, 1=Square, 2=Hex(V), 3=Hex(H), 4=Gridless, 5=Isometric
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public GridType? Type { get; set; } = default!;

        /// <summary>
        /// Grid size in pixels
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("size")]
        [System.ComponentModel.DataAnnotations.Range(50D, double.MaxValue)]
        public double? Size { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("color")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^#[0-9a-fA-F]{6}$")]
        public string? Color { get; set; } = default!;

        /// <summary>
        /// Grid opacity
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("alpha")]
        [System.ComponentModel.DataAnnotations.Range(0D, 1D)]
        public double? Alpha { get; set; } = default!;

        /// <summary>
        /// Distance per grid unit
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("distance")]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public double? Distance { get; set; } = default!;

        /// <summary>
        /// Distance units (ft, m, etc.)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("units")]
        public string? Units { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum GridType
    {

        _0 = 0,


        _1 = 1,


        _2 = 2,


        _3 = 3,


        _4 = 4,


        _5 = 5,


    }
}