//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


#nullable enable


namespace TTRPGConverter.Core.Models.Foundry.Core
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Schema for Foundry VTT module.json manifest files
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Json
    {

        /// <summary>
        /// Module identifier
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-z0-9-_]+$")]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Module display name
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("title")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; } = default!;

        /// <summary>
        /// Module description
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; } = default!;

        /// <summary>
        /// Semantic version string
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("version")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+\.\d+\.\d+$")]
        public string Version { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("compatibility")]
        [System.ComponentModel.DataAnnotations.Required]
        public Compatibility Compatibility { get; set; } = new Compatibility();

        [System.Text.Json.Serialization.JsonPropertyName("authors")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<Authors> Authors { get; set; } = new System.Collections.ObjectModel.Collection<Authors>();

        /// <summary>
        /// Module homepage URL
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("url")]
        public System.Uri? Url { get; set; } = default!;

        /// <summary>
        /// Module license
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("license")]
        public string? License { get; set; } = default!;

        /// <summary>
        /// README file URL
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("readme")]
        public System.Uri? Readme { get; set; } = default!;

        /// <summary>
        /// Bug report URL
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("bugs")]
        public System.Uri? Bugs { get; set; } = default!;

        /// <summary>
        /// Changelog URL
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("changelog")]
        public System.Uri? Changelog { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("media")]
        public System.Collections.Generic.List<Media>? Media { get; set; } = default!;

        /// <summary>
        /// ES module files
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("esmodules")]
        public System.Collections.Generic.List<string>? Esmodules { get; set; } = default!;

        /// <summary>
        /// Script files
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("scripts")]
        public System.Collections.Generic.List<string>? Scripts { get; set; } = default!;

        /// <summary>
        /// CSS files
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("styles")]
        public System.Collections.Generic.List<string>? Styles { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("languages")]
        public System.Collections.Generic.List<Languages>? Languages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packs")]
        public System.Collections.Generic.List<Packs>? Packs { get; set; } = default!;

        /// <summary>
        /// Compatible systems
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("system")]
        public System.Collections.Generic.List<string>? System { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dependencies")]
        public System.Collections.Generic.List<Dependencies>? Dependencies { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("conflicts")]
        public System.Collections.Generic.List<Conflicts>? Conflicts { get; set; } = default!;

        /// <summary>
        /// Whether module uses socket functionality
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("socket")]
        public bool? Socket { get; set; } = default!;

        /// <summary>
        /// Module manifest URL
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("manifest")]
        public System.Uri? Manifest { get; set; } = default!;

        /// <summary>
        /// Module download URL
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("download")]
        public System.Uri? Download { get; set; } = default!;

        /// <summary>
        /// Whether module is DRM protected
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("protected")]
        public bool? Protected { get; set; } = default!;

        /// <summary>
        /// Whether module provides core translations
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("coreTranslation")]
        public bool? CoreTranslation { get; set; } = default!;

        /// <summary>
        /// Whether module is a library
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("library")]
        public bool? Library { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Compatibility
    {

        /// <summary>
        /// Minimum compatible Foundry version
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("minimum")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+\.\d+\.\d+$")]
        public string Minimum { get; set; } = default!;

        /// <summary>
        /// Verified compatible Foundry version
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("verified")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+\.\d+\.\d+$")]
        public string Verified { get; set; } = default!;

        /// <summary>
        /// Maximum compatible Foundry version
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("maximum")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+\.\d+\.\d+$")]
        public string? Maximum { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Authors
    {

        /// <summary>
        /// Author name
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Author email
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// Author URL
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("url")]
        public System.Uri? Url { get; set; } = default!;

        /// <summary>
        /// Author Discord username
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("discord")]
        public string? Discord { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Media
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MediaType? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        public System.Uri? Url { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("caption")]
        public string? Caption { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("loop")]
        public bool? Loop { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("thumbnail")]
        public System.Uri? Thumbnail { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Languages
    {

        [System.Text.Json.Serialization.JsonPropertyName("lang")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-z]{2}(-[A-Z]{2})?$")]
        public string Lang { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Path { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Packs
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Path { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PacksType Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("system")]
        public string? System { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("private")]
        public bool? Private { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flags")]
        public object? Flags { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Dependencies
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DependenciesType Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("manifest")]
        public System.Uri? Manifest { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("compatibility")]
        public Compatibility2? Compatibility { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Conflicts
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ConflictsType? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("versionMin")]
        public string? VersionMin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("versionMax")]
        public string? VersionMax { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum MediaType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"icon")]
        Icon = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"screenshot")]
        Screenshot = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"video")]
        Video = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum PacksType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Actor")]
        Actor = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Item")]
        Item = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Scene")]
        Scene = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"JournalEntry")]
        JournalEntry = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Macro")]
        Macro = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"RollTable")]
        RollTable = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Playlist")]
        Playlist = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"Adventure")]
        Adventure = 7,


        [System.Runtime.Serialization.EnumMember(Value = @"Card")]
        Card = 8,


        [System.Runtime.Serialization.EnumMember(Value = @"Cards")]
        Cards = 9,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DependenciesType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"module")]
        Module = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"system")]
        System = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"world")]
        World = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Compatibility2
    {

        /// <summary>
        /// Minimum compatible Foundry version
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("minimum")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+\.\d+\.\d+$")]
        public string Minimum { get; set; } = default!;

        /// <summary>
        /// Verified compatible Foundry version
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("verified")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+\.\d+\.\d+$")]
        public string Verified { get; set; } = default!;

        /// <summary>
        /// Maximum compatible Foundry version
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("maximum")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+\.\d+\.\d+$")]
        public string? Maximum { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum ConflictsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"module")]
        Module = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"system")]
        System = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"world")]
        World = 2,


    }
}