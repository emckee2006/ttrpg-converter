//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


#nullable enable


namespace TTRPGConverter.Core.Models.Foundry.Core
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Document ownership permissions by user role
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Ownership
    {

        /// <summary>
        /// Default permission level (0=None, 1=Limited, 2=Observer, 3=Owner)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("default")]
        public OwnershipDefault? Default { get; set; } = default!;

    }

    /// <summary>
    /// Compendium pack configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CompendiumPack
    {

        /// <summary>
        /// Pack identifier
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Pack display name
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("label")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; } = default!;

        /// <summary>
        /// Document type stored in this pack
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CompendiumPackType Type { get; set; } = default!;

        /// <summary>
        /// Relative path to pack database file
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("path")]
        public string? Path { get; set; } = default!;

        /// <summary>
        /// Game system identifier (for system packs)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("system")]
        public string? System { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ownership")]
        public Ownership? Ownership { get; set; } = default!;

        /// <summary>
        /// Pack-specific flags
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("flags")]
        public object? Flags { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Author information for Foundry VTT content
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Author
    {

        /// <summary>
        /// Author name
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Author email
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// Author website
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("url")]
        public System.Uri? Url { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Schema for Foundry VTT world.json configuration file
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Json
    {

        /// <summary>
        /// Display name of the world
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("title")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Title { get; set; } = default!;

        /// <summary>
        /// Unique world identifier (lowercase, alphanumeric, hyphens, underscores)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-z0-9-_]+$")]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Game system ID (e.g., dnd5e, pf2e, ose)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("system")]
        [System.ComponentModel.DataAnnotations.Required]
        public string System { get; set; } = default!;

        /// <summary>
        /// Foundry core version (e.g., 12.331)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("coreVersion")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+\.\d+(\.\d+)?$")]
        public string CoreVersion { get; set; } = default!;

        /// <summary>
        /// Game system version
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("systemVersion")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+\.\d+(\.\d+)?$")]
        public string? SystemVersion { get; set; } = default!;

        /// <summary>
        /// World description
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Join screen theme
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("joinTheme")]
        public string? JoinTheme { get; set; } = "default";

        /// <summary>
        /// Foundry version compatibility
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("compatibility")]
        public Compatibility? Compatibility { get; set; } = default!;

        /// <summary>
        /// ISO date string of last play session
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastPlayed")]
        public string? LastPlayed { get; set; } = default!;

        /// <summary>
        /// Total playtime in seconds
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("playtime")]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double? Playtime { get; set; } = default!;

        /// <summary>
        /// Compendium packs in this world
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("packs")]
        public System.Collections.Generic.List<CompendiumPack>? Packs { get; set; } = default!;

        /// <summary>
        /// World authors
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("authors")]
        public System.Collections.Generic.List<Author>? Authors { get; set; } = default!;

        /// <summary>
        /// World version
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public string? Version { get; set; } = default!;

        /// <summary>
        /// Legacy compatibility field
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("minimumCoreVersion")]
        public string? MinimumCoreVersion { get; set; } = default!;

        /// <summary>
        /// Legacy compatibility field
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("compatibleCoreVersion")]
        public string? CompatibleCoreVersion { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum OwnershipDefault
    {

        _0 = 0,


        _1 = 1,


        _2 = 2,


        _3 = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum CompendiumPackType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Actor")]
        Actor = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Item")]
        Item = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"JournalEntry")]
        JournalEntry = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Macro")]
        Macro = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"Playlist")]
        Playlist = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"RollTable")]
        RollTable = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"Scene")]
        Scene = 6,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Compatibility
    {

        /// <summary>
        /// Minimum supported Foundry version
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("minimum")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+(\.\d+)?$")]
        public string? Minimum { get; set; } = default!;

        /// <summary>
        /// Last verified Foundry version
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("verified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+(\.\d+)?$")]
        public string? Verified { get; set; } = default!;

        /// <summary>
        /// Maximum supported Foundry version
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("maximum")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+(\.\d+)?$")]
        public string? Maximum { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }
}