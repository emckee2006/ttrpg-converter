//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


#nullable enable


namespace TTRPGConverter.Core.Models.Pathbuilder
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Extracted custom_background definition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomBackground
    {

        /// <summary>
        /// Database identifier
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("databaseID")]
        public int DatabaseID { get; set; } = default!;

        /// <summary>
        /// Creation timestamp
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+$")]
        public string Timestamp { get; set; } = default!;

        /// <summary>
        /// Unique background ID (UUID)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Background name
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Background traits (e.g., '3rd Party')
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("traits")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Traits { get; set; } = default!;

        /// <summary>
        /// First ability boost reference (0=Str, 1=Dex, 2=Con, 3=Int, 4=Wis, 5=Cha)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("boost_ref_1")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CustomBackgroundBoost_ref_1 Boost_ref_1 { get; set; } = default!;

        /// <summary>
        /// Second ability boost reference
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("boost_ref_2")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CustomBackgroundBoost_ref_2 Boost_ref_2 { get; set; } = default!;

        /// <summary>
        /// Free feat granted by background
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("freeFeatID")]
        public string? FreeFeatID { get; set; } = default!;

        /// <summary>
        /// Additional details for free feat
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("freeFeatDetail")]
        public string? FreeFeatDetail { get; set; } = default!;

        /// <summary>
        /// Skill proficiency granted
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("skill")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Skill { get; set; } = default!;

        /// <summary>
        /// Lore skill granted
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("lore")]
        public string? Lore { get; set; } = default!;

        /// <summary>
        /// Background description
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description { get; set; } = default!;

        /// <summary>
        /// Source book/pack
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("src")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Src { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Extracted custom_feat definition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomFeat
    {

        /// <summary>
        /// Database identifier
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("databaseID")]
        public int DatabaseID { get; set; } = default!;

        /// <summary>
        /// Creation timestamp
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+$")]
        public string Timestamp { get; set; } = default!;

        /// <summary>
        /// Unique feat ID (UUID)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Feat name
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Required level for feat
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("level")]
        [System.ComponentModel.DataAnnotations.Range(1, 20)]
        public int Level { get; set; } = default!;

        /// <summary>
        /// Feat traits (comma-separated)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("traits")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Traits { get; set; } = default!;

        /// <summary>
        /// Feat prerequisites
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("prerequisites")]
        public string? Prerequisites { get; set; } = default!;

        /// <summary>
        /// Usage frequency
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public string? Frequency { get; set; } = default!;

        /// <summary>
        /// Trigger condition
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("trigger")]
        public string? Trigger { get; set; } = default!;

        /// <summary>
        /// Feat description and effects
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description { get; set; } = default!;

        /// <summary>
        /// Source book/pack
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("src")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Src { get; set; } = default!;

        /// <summary>
        /// Action type (empty=passive, 1-3=actions, R=reaction, F=free)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("actionType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CustomFeatActionType? ActionType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Extracted custom_ancestry definition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomAncestry
    {

        /// <summary>
        /// Database identifier
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("databaseID")]
        public int DatabaseID { get; set; } = default!;

        /// <summary>
        /// Creation timestamp
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+$")]
        public string Timestamp { get; set; } = default!;

        /// <summary>
        /// Unique ancestry ID (UUID)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Ancestry name
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Base hit points
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("hp")]
        [System.ComponentModel.DataAnnotations.Range(4, 12)]
        public int Hp { get; set; } = default!;

        /// <summary>
        /// Size category: 1=Small, 2=Medium, 3=Large, 4=Huge
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public CustomAncestrySize Size { get; set; } = default!;

        /// <summary>
        /// Base speed in feet
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("speed")]
        [System.ComponentModel.DataAnnotations.Range(5, int.MaxValue)]
        public int Speed { get; set; } = default!;

        /// <summary>
        /// Ancestry traits (comma-separated)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("traits")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Traits { get; set; } = default!;

        /// <summary>
        /// First ability boost reference
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("boost_ref_1")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CustomAncestryBoost_ref_1? Boost_ref_1 { get; set; } = default!;

        /// <summary>
        /// Second ability boost reference
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("boost_ref_2")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CustomAncestryBoost_ref_2? Boost_ref_2 { get; set; } = default!;

        /// <summary>
        /// Ability flaw reference (empty if none)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("flaw_ref")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CustomAncestryFlaw_ref? Flaw_ref { get; set; } = default!;

        /// <summary>
        /// Starting languages
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("languages")]
        public System.Collections.Generic.List<string>? Languages { get; set; } = default!;

        /// <summary>
        /// Special senses
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("senses")]
        public System.Collections.Generic.List<string>? Senses { get; set; } = default!;

        /// <summary>
        /// Ancestry description
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description { get; set; } = default!;

        /// <summary>
        /// Source book/pack
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("src")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Src { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Extracted custom_heritage definition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomHeritage
    {

        [System.Text.Json.Serialization.JsonPropertyName("databaseID")]
        public int DatabaseID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+$")]
        public string Timestamp { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Heritage name
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Parent ancestry ID
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("ancestryID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AncestryID { get; set; } = default!;

        /// <summary>
        /// Heritage description and abilities
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description { get; set; } = default!;

        /// <summary>
        /// Source book/pack
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("src")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Src { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Extracted custom_spell definition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomSpell
    {

        /// <summary>
        /// Database identifier
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("databaseID")]
        public int DatabaseID { get; set; } = default!;

        /// <summary>
        /// Creation timestamp
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+$")]
        public string Timestamp { get; set; } = default!;

        /// <summary>
        /// Unique spell ID (UUID)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Spell name
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Spell level (0=cantrip)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("level")]
        [System.ComponentModel.DataAnnotations.Range(0, 10)]
        public int Level { get; set; } = default!;

        /// <summary>
        /// Spell traits (comma-separated)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("traits")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Traits { get; set; } = default!;

        /// <summary>
        /// Magical traditions
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("traditions")]
        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.List<Traditions>? Traditions { get; set; } = default!;

        /// <summary>
        /// Casting time and actions
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("cast")]
        public string? Cast { get; set; } = default!;

        /// <summary>
        /// Spell components (somatic, verbal, material)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("components")]
        public string? Components { get; set; } = default!;

        /// <summary>
        /// Spell range
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("range")]
        public string? Range { get; set; } = default!;

        /// <summary>
        /// Area of effect
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("area")]
        public string? Area { get; set; } = default!;

        /// <summary>
        /// Valid targets
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("targets")]
        public string? Targets { get; set; } = default!;

        /// <summary>
        /// Spell duration
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("duration")]
        public string? Duration { get; set; } = default!;

        /// <summary>
        /// Required saving throw
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("savingThrow")]
        public string? SavingThrow { get; set; } = default!;

        /// <summary>
        /// Spell description and effects
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description { get; set; } = default!;

        /// <summary>
        /// Heightened spell effects
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("heightened")]
        public string? Heightened { get; set; } = default!;

        /// <summary>
        /// Source book/pack
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("src")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Src { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Extracted custom_item definition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class CustomItem
    {

        /// <summary>
        /// Database identifier
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("databaseID")]
        public int DatabaseID { get; set; } = default!;

        /// <summary>
        /// Creation timestamp
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+$")]
        public string Timestamp { get; set; } = default!;

        /// <summary>
        /// Unique item ID (UUID)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Item name
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Item level
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("level")]
        [System.ComponentModel.DataAnnotations.Range(0, 25)]
        public int Level { get; set; } = default!;

        /// <summary>
        /// Item traits (comma-separated)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("traits")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Traits { get; set; } = default!;

        /// <summary>
        /// Item category (weapon, armor, consumable, etc.)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("category")]
        public string? Category { get; set; } = default!;

        /// <summary>
        /// Item price in gold/silver/copper
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public string? Price { get; set; } = default!;

        /// <summary>
        /// Item bulk (L, 1, 2, etc.)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("bulk")]
        public string? Bulk { get; set; } = default!;

        /// <summary>
        /// Weapon damage dice
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("damage")]
        public string? Damage { get; set; } = default!;

        /// <summary>
        /// Damage type (piercing, slashing, etc.)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("damageType")]
        public string? DamageType { get; set; } = default!;

        /// <summary>
        /// Weapon group classification
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("weaponGroup")]
        public string? WeaponGroup { get; set; } = default!;

        /// <summary>
        /// Armor AC bonus
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("ac")]
        public int? Ac { get; set; } = default!;

        /// <summary>
        /// Maximum Dex bonus for armor
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dexCap")]
        public int? DexCap { get; set; } = default!;

        /// <summary>
        /// Armor check penalty
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("checkPenalty")]
        public int? CheckPenalty { get; set; } = default!;

        /// <summary>
        /// Speed penalty from armor
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("speedPenalty")]
        public int? SpeedPenalty { get; set; } = default!;

        /// <summary>
        /// Required Strength score
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("strength")]
        public int? Strength { get; set; } = default!;

        /// <summary>
        /// Armor group classification
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("armorGroup")]
        public string? ArmorGroup { get; set; } = default!;

        /// <summary>
        /// Weapon range increment
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("range")]
        public string? Range { get; set; } = default!;

        /// <summary>
        /// Reload time for ranged weapons
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("reload")]
        public string? Reload { get; set; } = default!;

        /// <summary>
        /// Number of hands required
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("hands")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CustomItemHands? Hands { get; set; } = default!;

        /// <summary>
        /// Item usage/activation
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("usage")]
        public string? Usage { get; set; } = default!;

        /// <summary>
        /// Activation method
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("activate")]
        public string? Activate { get; set; } = default!;

        /// <summary>
        /// Item description and abilities
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description { get; set; } = default!;

        /// <summary>
        /// Source book/pack
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("src")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Src { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Schema for Pathbuilder 2e custom content pack JSON files
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Json
    {

        /// <summary>
        /// Unique pack identifier (UUID)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("customPackID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")]
        public string CustomPackID { get; set; } = default!;

        /// <summary>
        /// Display name for the content pack
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("customPackName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string CustomPackName { get; set; } = default!;

        /// <summary>
        /// Custom backgrounds in this pack
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("listCustomBackgrounds")]
        public System.Collections.Generic.List<CustomBackground>? ListCustomBackgrounds { get; set; } = default!;

        /// <summary>
        /// Custom feats in this pack
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("listCustomFeats")]
        public System.Collections.Generic.List<CustomFeat>? ListCustomFeats { get; set; } = default!;

        /// <summary>
        /// Custom ancestries in this pack
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("listCustomAncestries")]
        public System.Collections.Generic.List<CustomAncestry>? ListCustomAncestries { get; set; } = default!;

        /// <summary>
        /// Custom heritages in this pack
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("listCustomHeritages")]
        public System.Collections.Generic.List<CustomHeritage>? ListCustomHeritages { get; set; } = default!;

        /// <summary>
        /// Custom spells in this pack
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("listCustomSpells")]
        public System.Collections.Generic.List<CustomSpell>? ListCustomSpells { get; set; } = default!;

        /// <summary>
        /// Custom items in this pack
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("listCustomItems")]
        public System.Collections.Generic.List<CustomItem>? ListCustomItems { get; set; } = default!;

        /// <summary>
        /// Custom classes in this pack
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("listCustomClasses")]
        public System.Collections.Generic.List<object>? ListCustomClasses { get; set; } = default!;

        /// <summary>
        /// Custom archetypes in this pack
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("listCustomArchetypes")]
        public System.Collections.Generic.List<object>? ListCustomArchetypes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum CustomBackgroundBoost_ref_1
    {

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"1")]
        _1 = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"2")]
        _2 = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"3")]
        _3 = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"4")]
        _4 = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"5")]
        _5 = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum CustomBackgroundBoost_ref_2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"1")]
        _1 = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"2")]
        _2 = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"3")]
        _3 = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"4")]
        _4 = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"5")]
        _5 = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum CustomFeatActionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"1")]
        _1 = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"2")]
        _2 = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"3")]
        _3 = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"R")]
        R = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"F")]
        F = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum CustomAncestrySize
    {

        _1 = 1,


        _2 = 2,


        _3 = 3,


        _4 = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum CustomAncestryBoost_ref_1
    {

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"1")]
        _1 = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"2")]
        _2 = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"3")]
        _3 = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"4")]
        _4 = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"5")]
        _5 = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"FREE")]
        FREE = 6,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum CustomAncestryBoost_ref_2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"1")]
        _1 = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"2")]
        _2 = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"3")]
        _3 = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"4")]
        _4 = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"5")]
        _5 = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"FREE")]
        FREE = 6,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum CustomAncestryFlaw_ref
    {

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"1")]
        _1 = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"2")]
        _2 = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"3")]
        _3 = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"4")]
        _4 = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"5")]
        _5 = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 6,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum Traditions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Arcane")]
        Arcane = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Divine")]
        Divine = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Occult")]
        Occult = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Primal")]
        Primal = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum CustomItemHands
    {

        [System.Runtime.Serialization.EnumMember(Value = @"1")]
        _1 = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"2")]
        _2 = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"1+")]
        _1_ = 2,


    }
}