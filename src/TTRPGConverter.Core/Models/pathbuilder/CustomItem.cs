//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


#nullable enable


namespace TTRPGConverter.Core.Models.Pathbuilder
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Extracted custom_item definition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Json
    {

        /// <summary>
        /// Database identifier
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("databaseID")]
        public int DatabaseID { get; set; } = default!;

        /// <summary>
        /// Creation timestamp
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+$")]
        public string Timestamp { get; set; } = default!;

        /// <summary>
        /// Unique item ID (UUID)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Item name
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Item level
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("level")]
        [System.ComponentModel.DataAnnotations.Range(0, 25)]
        public int Level { get; set; } = default!;

        /// <summary>
        /// Item traits (comma-separated)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("traits")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Traits { get; set; } = default!;

        /// <summary>
        /// Item category (weapon, armor, consumable, etc.)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("category")]
        public string? Category { get; set; } = default!;

        /// <summary>
        /// Item price in gold/silver/copper
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public string? Price { get; set; } = default!;

        /// <summary>
        /// Item bulk (L, 1, 2, etc.)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("bulk")]
        public string? Bulk { get; set; } = default!;

        /// <summary>
        /// Weapon damage dice
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("damage")]
        public string? Damage { get; set; } = default!;

        /// <summary>
        /// Damage type (piercing, slashing, etc.)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("damageType")]
        public string? DamageType { get; set; } = default!;

        /// <summary>
        /// Weapon group classification
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("weaponGroup")]
        public string? WeaponGroup { get; set; } = default!;

        /// <summary>
        /// Armor AC bonus
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("ac")]
        public int? Ac { get; set; } = default!;

        /// <summary>
        /// Maximum Dex bonus for armor
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("dexCap")]
        public int? DexCap { get; set; } = default!;

        /// <summary>
        /// Armor check penalty
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("checkPenalty")]
        public int? CheckPenalty { get; set; } = default!;

        /// <summary>
        /// Speed penalty from armor
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("speedPenalty")]
        public int? SpeedPenalty { get; set; } = default!;

        /// <summary>
        /// Required Strength score
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("strength")]
        public int? Strength { get; set; } = default!;

        /// <summary>
        /// Armor group classification
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("armorGroup")]
        public string? ArmorGroup { get; set; } = default!;

        /// <summary>
        /// Weapon range increment
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("range")]
        public string? Range { get; set; } = default!;

        /// <summary>
        /// Reload time for ranged weapons
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("reload")]
        public string? Reload { get; set; } = default!;

        /// <summary>
        /// Number of hands required
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("hands")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public JsonHands? Hands { get; set; } = default!;

        /// <summary>
        /// Item usage/activation
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("usage")]
        public string? Usage { get; set; } = default!;

        /// <summary>
        /// Activation method
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("activate")]
        public string? Activate { get; set; } = default!;

        /// <summary>
        /// Item description and abilities
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description { get; set; } = default!;

        /// <summary>
        /// Source book/pack
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("src")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Src { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum JsonHands
    {

        [System.Runtime.Serialization.EnumMember(Value = @"1")]
        _1 = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"2")]
        _2 = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"1+")]
        _1_ = 2,


    }
}