//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


#nullable enable


namespace TTRPGConverter.Core.Models.Pathbuilder
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Extracted custom_spell definition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Json
    {

        /// <summary>
        /// Database identifier
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("databaseID")]
        public int DatabaseID { get; set; } = default!;

        /// <summary>
        /// Creation timestamp
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+$")]
        public string Timestamp { get; set; } = default!;

        /// <summary>
        /// Unique spell ID (UUID)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Spell name
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Spell level (0=cantrip)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("level")]
        [System.ComponentModel.DataAnnotations.Range(0, 10)]
        public int Level { get; set; } = default!;

        /// <summary>
        /// Spell traits (comma-separated)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("traits")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Traits { get; set; } = default!;

        /// <summary>
        /// Magical traditions
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("traditions")]
        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.List<Traditions>? Traditions { get; set; } = default!;

        /// <summary>
        /// Casting time and actions
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("cast")]
        public string? Cast { get; set; } = default!;

        /// <summary>
        /// Spell components (somatic, verbal, material)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("components")]
        public string? Components { get; set; } = default!;

        /// <summary>
        /// Spell range
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("range")]
        public string? Range { get; set; } = default!;

        /// <summary>
        /// Area of effect
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("area")]
        public string? Area { get; set; } = default!;

        /// <summary>
        /// Valid targets
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("targets")]
        public string? Targets { get; set; } = default!;

        /// <summary>
        /// Spell duration
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("duration")]
        public string? Duration { get; set; } = default!;

        /// <summary>
        /// Required saving throw
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("savingThrow")]
        public string? SavingThrow { get; set; } = default!;

        /// <summary>
        /// Spell description and effects
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description { get; set; } = default!;

        /// <summary>
        /// Heightened spell effects
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("heightened")]
        public string? Heightened { get; set; } = default!;

        /// <summary>
        /// Source book/pack
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("src")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Src { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum Traditions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Arcane")]
        Arcane = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"Divine")]
        Divine = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"Occult")]
        Occult = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"Primal")]
        Primal = 3,


    }
}