//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


#nullable enable


namespace TTRPGConverter.Core.Models.Roll20
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Extracted handout definition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Handout
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^-[A-Za-z0-9_-]{19}$")]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("gmnotes")]
        public string? Gmnotes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inplayerjournals")]
        public string? Inplayerjournals { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("archived")]
        public bool? Archived { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Extracted pdf definition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Pdf
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        public System.Uri? Url { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Character sheet attribute (e.g., strength, hp)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Attribute
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^-[A-Za-z0-9_-]{19}$")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Attribute name (e.g., 'strength', 'hp')
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Current value as string
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("current")]
        public string? Current { get; set; } = default!;

        /// <summary>
        /// Maximum value as string
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("max")]
        public string? Max { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Character sheet ability/macro
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Ability
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^-[A-Za-z0-9_-]{19}$")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Ability name
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Ability description
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Macro commands/actions
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("action")]
        public string? Action { get; set; } = default!;

        /// <summary>
        /// Whether this appears as token action
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("istokenaction")]
        public bool? Istokenaction { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Schema for Roll20 character sheet with attributes and abilities
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Character
    {

        /// <summary>
        /// Unique Roll20 character ID
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^-[A-Za-z0-9_-]{19}$")]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Character name
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Character avatar image URL
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("avatar")]
        public System.Uri? Avatar { get; set; } = default!;

        /// <summary>
        /// Character biography/notes
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("bio")]
        public string? Bio { get; set; } = default!;

        /// <summary>
        /// GM-only notes
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("gmnotes")]
        public string? Gmnotes { get; set; } = default!;

        /// <summary>
        /// Default token settings JSON
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("defaulttoken")]
        public string? Defaulttoken { get; set; } = default!;

        /// <summary>
        /// Character tags
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public string? Tags { get; set; } = default!;

        /// <summary>
        /// Comma-separated player IDs who can control this character
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("controlledby")]
        public string? Controlledby { get; set; } = default!;

        /// <summary>
        /// Comma-separated player IDs who can see this character
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("inplayerjournals")]
        public string? Inplayerjournals { get; set; } = default!;

        /// <summary>
        /// Whether character is archived
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("archived")]
        public bool? Archived { get; set; } = false;

        /// <summary>
        /// Character sheet attributes
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("attribs")]
        public System.Collections.Generic.List<Attribute>? Attribs { get; set; } = default!;

        /// <summary>
        /// Character sheet abilities/macros
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("abilities")]
        public System.Collections.Generic.List<Ability>? Abilities { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Extracted page definition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Page
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^-[A-Za-z0-9_-]{19}$")]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("width")]
        public double? Width { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        public double? Height { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("background_color")]
        public string? Background_color { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("grid_opacity")]
        public double? Grid_opacity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("grid_size")]
        public double? Grid_size { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("snapping_increment")]
        public double? Snapping_increment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fog_opacity")]
        public double? Fog_opacity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("archived")]
        public bool? Archived { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lightupdatedrop")]
        public bool? Lightupdatedrop { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lightenforcelos")]
        public bool? Lightenforcelos { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lightrestrictmovement")]
        public bool? Lightrestrictmovement { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lightglobalillum")]
        public bool? Lightglobalillum { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Extracted player definition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Player
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayname")]
        public string? Displayname { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("color")]
        public string? Color { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("showname")]
        public bool? Showname { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Extracted macro definition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Macro
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("action")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Action { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("visibleto")]
        public string? Visibleto { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("istokenaction")]
        public bool? Istokenaction { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Extracted deck definition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Deck
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("showplayers")]
        public bool? Showplayers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("playerscandraw")]
        public bool? Playerscandraw { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("avatar")]
        public string? Avatar { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shown")]
        public bool? Shown { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cards")]
        public System.Collections.Generic.List<object>? Cards { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Extracted table definition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Table
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("showplayers")]
        public bool? Showplayers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tableitems")]
        public System.Collections.Generic.List<Tableitems>? Tableitems { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Extracted audio_track definition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AudioTrack
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("track_id")]
        public string? Track_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("loop")]
        public bool? Loop { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("volume")]
        public double? Volume { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("playing")]
        public bool? Playing { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Extracted turn_entry definition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class TurnEntry
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pr")]
        public string? Pr { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("custom")]
        public string? Custom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("_pageid")]
        public string? _pageid { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Schema for Roll20 campaign export format (based on R20Exporter)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Json
    {

        /// <summary>
        /// Journal entries and handouts
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("handouts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<Handout> Handouts { get; set; } = new System.Collections.ObjectModel.Collection<Handout>();

        /// <summary>
        /// PDF attachments
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("pdfs")]
        public System.Collections.Generic.List<Pdf>? Pdfs { get; set; } = default!;

        /// <summary>
        /// Character sheets with attributes and abilities
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("characters")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<Character> Characters { get; set; } = new System.Collections.ObjectModel.Collection<Character>();

        /// <summary>
        /// Maps/scenes with tokens, paths, lighting
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("pages")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<Page> Pages { get; set; } = new System.Collections.ObjectModel.Collection<Page>();

        /// <summary>
        /// Campaign players
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("players")]
        public System.Collections.Generic.List<Player>? Players { get; set; } = default!;

        /// <summary>
        /// Campaign macros
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("macros")]
        public System.Collections.Generic.List<Macro>? Macros { get; set; } = default!;

        /// <summary>
        /// Card decks
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("decks")]
        public System.Collections.Generic.List<Deck>? Decks { get; set; } = default!;

        /// <summary>
        /// Random tables (rollabletables)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("tables")]
        public System.Collections.Generic.List<Table>? Tables { get; set; } = default!;

        /// <summary>
        /// Audio playlists
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("jukebox")]
        public System.Collections.Generic.List<AudioTrack>? Jukebox { get; set; } = default!;

        /// <summary>
        /// Audio folder organization
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("jukeboxfolder")]
        public System.Collections.Generic.List<object>? Jukeboxfolder { get; set; } = default!;

        /// <summary>
        /// Journal folder organization
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("journalfolder")]
        public System.Collections.Generic.List<object>? Journalfolder { get; set; } = default!;

        /// <summary>
        /// Combat turn order
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("turnorder")]
        public System.Collections.Generic.List<TurnEntry>? Turnorder { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Tableitems
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        public double? Weight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("avatar")]
        public string? Avatar { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }
}