//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


#nullable enable


namespace TTRPGConverter.Core.Models.Roll20
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Character sheet attribute (e.g., strength, hp)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Attribute
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^-[A-Za-z0-9_-]{19}$")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Attribute name (e.g., 'strength', 'hp')
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Current value as string
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("current")]
        public string? Current { get; set; } = default!;

        /// <summary>
        /// Maximum value as string
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("max")]
        public string? Max { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Character sheet ability/macro
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Ability
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^-[A-Za-z0-9_-]{19}$")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Ability name
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Ability description
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Macro commands/actions
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("action")]
        public string? Action { get; set; } = default!;

        /// <summary>
        /// Whether this appears as token action
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("istokenaction")]
        public bool? Istokenaction { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Schema for Roll20 character sheet with attributes and abilities
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Json
    {

        /// <summary>
        /// Unique Roll20 character ID
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^-[A-Za-z0-9_-]{19}$")]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Character name
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Character avatar image URL
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("avatar")]
        public System.Uri? Avatar { get; set; } = default!;

        /// <summary>
        /// Character biography/notes
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("bio")]
        public string? Bio { get; set; } = default!;

        /// <summary>
        /// GM-only notes
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("gmnotes")]
        public string? Gmnotes { get; set; } = default!;

        /// <summary>
        /// Default token settings JSON
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("defaulttoken")]
        public string? Defaulttoken { get; set; } = default!;

        /// <summary>
        /// Character tags
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public string? Tags { get; set; } = default!;

        /// <summary>
        /// Comma-separated player IDs who can control this character
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("controlledby")]
        public string? Controlledby { get; set; } = default!;

        /// <summary>
        /// Comma-separated player IDs who can see this character
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("inplayerjournals")]
        public string? Inplayerjournals { get; set; } = default!;

        /// <summary>
        /// Whether character is archived
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("archived")]
        public bool? Archived { get; set; } = false;

        /// <summary>
        /// Character sheet attributes
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("attribs")]
        public System.Collections.Generic.List<Attribute>? Attribs { get; set; } = default!;

        /// <summary>
        /// Character sheet abilities/macros
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("abilities")]
        public System.Collections.Generic.List<Ability>? Abilities { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }
}