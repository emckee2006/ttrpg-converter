using System.Text.Json;
using Microsoft.Extensions.Logging;
using TTRPGConverter.Core.Models.Foundry.Dnd5e;

namespace TTRPGConverter.Core.Services;

/// <summary>
/// Service for generating Foundry VTT world directory structure
/// </summary>
public interface IFoundryWorldGenerator
{
    Task<string> CreateWorldDirectoryAsync(string basePath, string worldName, string system);
    Task WriteWorldManifestAsync(string worldPath, string worldName, string system, string version = "12");
    Task<string> GetAssetDirectoryAsync(string worldPath, string assetType);
}

public class FoundryWorldGenerator : IFoundryWorldGenerator
{
    private readonly ILogger<FoundryWorldGenerator> _logger;
    private readonly JsonSerializerOptions _jsonOptions;

    public FoundryWorldGenerator(ILogger<FoundryWorldGenerator> logger)
    {
        _logger = logger;
        _jsonOptions = new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            WriteIndented = true,
            DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull
        };
    }

    public async Task<string> CreateWorldDirectoryAsync(string basePath, string worldName, string system)
    {
        var worldPath = Path.Combine(basePath, SanitizeDirectoryName(worldName));
        
        _logger.LogInformation("Creating Foundry world directory: {WorldPath}", worldPath);

        // Create main world directory
        Directory.CreateDirectory(worldPath);

        // Create standard Foundry world subdirectories
        var subdirectories = new[]
        {
            "data",           // World data files
            "assets",         // Asset storage
            "assets/tokens",  // Token images
            "assets/maps",    // Map/scene images  
            "assets/audio",   // Audio files
            "assets/ui",      // UI elements
            "packs"           // Compendium packs
        };

        foreach (var subdir in subdirectories)
        {
            var fullPath = Path.Combine(worldPath, subdir);
            Directory.CreateDirectory(fullPath);
            _logger.LogDebug("Created directory: {Directory}", fullPath);
        }

        // Write world manifest
        await WriteWorldManifestAsync(worldPath, worldName, system);

        _logger.LogInformation("Foundry world structure created successfully");
        return worldPath;
    }

    public async Task WriteWorldManifestAsync(string worldPath, string worldName, string system, string version = "12")
    {
        var manifest = new FoundryWorldManifest
        {
            Id = SanitizeId(worldName),
            Title = worldName,
            Description = $"Converted from Roll20 campaign: {worldName}",
            System = system,
            CoreVersion = version,
            Version = "1.0.0",
            NextSession = null,
            ResetKeys = false,
            SafeMode = false,
            Background = "",
            JoinTheme = "foundry",
            ActiveTokens = false
        };

        var manifestPath = Path.Combine(worldPath, "world.json");
        var manifestJson = JsonSerializer.Serialize(manifest, _jsonOptions);
        
        await File.WriteAllTextAsync(manifestPath, manifestJson);
        
        _logger.LogDebug("Written world manifest: {ManifestPath}", manifestPath);
    }

    public async Task<string> GetAssetDirectoryAsync(string worldPath, string assetType)
    {
        var assetSubdir = assetType.ToLowerInvariant() switch
        {
            "image" or "token" => "assets/tokens",
            "map" or "scene" => "assets/maps", 
            "audio" or "sound" => "assets/audio",
            _ => "assets"
        };

        var assetPath = Path.Combine(worldPath, assetSubdir);
        
        // Ensure directory exists
        if (!Directory.Exists(assetPath))
        {
            Directory.CreateDirectory(assetPath);
            _logger.LogDebug("Created asset directory: {AssetPath}", assetPath);
        }

        return assetPath;
    }

    private static string SanitizeDirectoryName(string name)
    {
        // Remove invalid directory name characters
        var invalidChars = Path.GetInvalidFileNameChars();
        var sanitized = new string(name.Where(c => !invalidChars.Contains(c)).ToArray());
        
        // Replace spaces with underscores and convert to lowercase
        return sanitized.Replace(' ', '_').ToLowerInvariant();
    }

    private static string SanitizeId(string name)
    {
        // Create a valid Foundry world ID (alphanumeric + hyphens)
        var sanitized = new string(name.Where(c => char.IsLetterOrDigit(c) || c == '-' || c == '_').ToArray());
        return sanitized.Replace('_', '-').ToLowerInvariant();
    }
}

/// <summary>
/// Foundry world manifest structure
/// </summary>
public class FoundryWorldManifest
{
    public string Id { get; set; } = string.Empty;
    public string Title { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public string System { get; set; } = string.Empty;
    public string CoreVersion { get; set; } = "12";
    public string Version { get; set; } = "1.0.0";
    public string? NextSession { get; set; }
    public bool ResetKeys { get; set; }
    public bool SafeMode { get; set; }
    public string Background { get; set; } = string.Empty;
    public string JoinTheme { get; set; } = "foundry";
    public bool ActiveTokens { get; set; }
}
