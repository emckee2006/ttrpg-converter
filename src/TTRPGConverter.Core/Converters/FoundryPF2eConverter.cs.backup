using TTRPGConverter.Core.Entities;
using TTRPGConverter.Core.Models.Foundry.Pf2e;
using FoundryItem = TTRPGConverter.Core.Models.Foundry.Pf2e.Item;
using FoundryActor = TTRPGConverter.Core.Models.Foundry.Pf2e.Actor;

namespace TTRPGConverter.Core.Converters;

/// <summary>
/// Converts internal character representation to Foundry PF2e format
/// </summary>
public class FoundryPF2eConverter : ICharacterConverter<Actor>
{
    public ICharacter ToInternal(Actor raw)
    {
        // Convert Foundry abilities to internal format
        var abilities = new AbilityScores(
            Strength: raw.System.Abilities.Strength.Value,
            Dexterity: raw.System.Abilities.Dexterity.Value,
            Constitution: raw.System.Abilities.Constitution.Value,
            Intelligence: raw.System.Abilities.Intelligence.Value,
            Wisdom: raw.System.Abilities.Wisdom.Value,
            Charisma: raw.System.Abilities.Charisma.Value
        );

        // Convert Foundry class/level format
        var classes = new List<CharacterClass>();
        if (!string.IsNullOrWhiteSpace(raw.System.Details.Class.Value))
        {
            classes.Add(new CharacterClass(raw.System.Details.Class.Value, raw.System.Details.Level.Value));
        }

        // Convert items
        var items = raw.Items.Select(ConvertItem).ToList();

        // Separate spells from regular items
        var spells = raw.Items
            .Where(item => item.Type == "spell")
            .Select(ConvertSpell)
            .ToList();

        return new Character
        {
            Name = raw.Name,
            Level = raw.System.Details.Level.Value,
            Classes = classes,
            Abilities = abilities,
            Items = items.Where(item => item.Type != ItemType.Other || !IsSpellItem(item)).ToList(),
            Spells = spells,
            ExtensionData = new Dictionary<string, object>
            {
                ["FoundryData"] = raw.ExtensionData,
                ["Ancestry"] = raw.System.Details.Ancestry.Value,
                ["Heritage"] = raw.System.Details.Heritage.Value,
                ["Background"] = raw.System.Details.Background.Value,
                ["FoundryId"] = raw.Id
            }
        };
    }

    public Actor FromInternal(ICharacter character)
    {
        var foundry = new Actor
        {
            Name = character.Name,
            Type = "character",
            System = new ActorSystem
            {
                Details = new FoundryPF2eDetails
                {
                    Level = new FoundryValueWrapper { Value = character.Level }
                },
                Abilities = new FoundryPF2eAbilities
                {
                    Strength = new FoundryPF2eAbility 
                    { 
                        Value = character.Abilities.Strength,
                        Modifier = character.Abilities.StrengthModifier
                    },
                    Dexterity = new FoundryPF2eAbility 
                    { 
                        Value = character.Abilities.Dexterity,
                        Modifier = character.Abilities.DexterityModifier
                    },
                    Constitution = new FoundryPF2eAbility 
                    { 
                        Value = character.Abilities.Constitution,
                        Modifier = character.Abilities.ConstitutionModifier
                    },
                    Intelligence = new FoundryPF2eAbility 
                    { 
                        Value = character.Abilities.Intelligence,
                        Modifier = character.Abilities.IntelligenceModifier
                    },
                    Wisdom = new FoundryPF2eAbility 
                    { 
                        Value = character.Abilities.Wisdom,
                        Modifier = character.Abilities.WisdomModifier
                    },
                    Charisma = new FoundryPF2eAbility 
                    { 
                        Value = character.Abilities.Charisma,
                        Modifier = character.Abilities.CharismaModifier
                    }
                }
            }
        };

        // Set primary class
        var primaryClass = character.Classes.FirstOrDefault();
        if (primaryClass != null)
        {
            foundry.System.Details.Class = new FoundryStringWrapper { Value = primaryClass.Name };
            foundry.System.Details.Level = new FoundryValueWrapper { Value = primaryClass.Level };
        }

        // Convert items
        foundry.Items.AddRange(character.Items.Select(ConvertItemToFoundry));

        // Convert spells to spell items
        foundry.Items.AddRange(character.Spells.Select(ConvertSpellToFoundry));

        // Restore extension data
        if (character.ExtensionData.TryGetValue("Ancestry", out var ancestry))
            foundry.System.Details.Ancestry = new FoundryStringWrapper { Value = ancestry.ToString() ?? "" };
        if (character.ExtensionData.TryGetValue("Heritage", out var heritage))
            foundry.System.Details.Heritage = new FoundryStringWrapper { Value = heritage.ToString() ?? "" };
        if (character.ExtensionData.TryGetValue("Background", out var background))
            foundry.System.Details.Background = new FoundryStringWrapper { Value = background.ToString() ?? "" };
        if (character.ExtensionData.TryGetValue("FoundryId", out var foundryId))
            foundry.Id = foundryId.ToString() ?? foundry.Id;

        return foundry;
    }

    private IItem ConvertItem(FoundryItem raw)
    {
        var itemType = raw.Type switch
        {
            "weapon" => ItemType.Weapon,
            "armor" => ItemType.Armor,
            "shield" => ItemType.Shield,
            "consumable" => ItemType.Consumable,
            "equipment" => ItemType.Equipment,
            "treasure" => ItemType.Treasure,
            "spell" => ItemType.Other, // Spells handled separately
            _ => ItemType.Equipment
        };

        return new Item
        {
            Name = raw.Name,
            Type = itemType,
            Description = raw.System.Description.Value,
            Quantity = raw.System.Quantity,
            Weight = raw.System.Weight.Value,
            Value = raw.System.Price.Value,
            IsEquipped = raw.System.Equipped.CarryType == "worn",
            ExtensionData = new Dictionary<string, object>
            {
                ["FoundryId"] = raw.Id,
                ["FoundryType"] = raw.Type,
                ["FoundryData"] = raw.ExtensionData
            }
        };
    }

    private ISpell ConvertSpell(FoundryItem raw)
    {
        var components = new SpellComponents(
            Verbal: raw.System.Components?.Verbal ?? false,
            Somatic: raw.System.Components?.Somatic ?? false,
            Material: raw.System.Components?.Material ?? false
        );

        return new Spell
        {
            Name = raw.Name,
            Level = raw.System.Level?.Value ?? 0,
            School = raw.System.School?.Value,
            Description = raw.System.Description.Value,
            CastingTime = raw.System.CastingTime?.Value,
            Range = raw.System.Range?.Value,
            Duration = raw.System.Duration?.Value,
            Components = components,
            ExtensionData = new Dictionary<string, object>
            {
                ["FoundryId"] = raw.Id,
                ["FoundryData"] = raw.ExtensionData
            }
        };
    }

    private FoundryItem ConvertItemToFoundry(IItem item)
    {
        var foundryType = item.Type switch
        {
            ItemType.Weapon => "weapon",
            ItemType.Armor => "armor",
            ItemType.Shield => "shield",
            ItemType.Consumable => "consumable",
            ItemType.Treasure => "treasure",
            _ => "equipment"
        };

        var foundryItem = new FoundryItem
        {
            Name = item.Name,
            Type = foundryType,
            System = new ItemSystem
            {
                Description = new FoundryDescriptionWrapper { Value = item.Description ?? "" },
                Quantity = item.Quantity,
                Weight = new FoundryWeightWrapper { Value = item.Weight ?? 0 },
                Price = new FoundryPriceWrapper { Value = item.Value ?? 0 },
                Equipped = new FoundryEquippedWrapper 
                { 
                    CarryType = item.IsEquipped ? "worn" : "stowed" 
                }
            }
        };

        // Restore Foundry ID if available
        if (item.ExtensionData.TryGetValue("FoundryId", out var foundryId))
            foundryItem.Id = foundryId.ToString() ?? foundryItem.Id;

        return foundryItem;
    }

    private FoundryItem ConvertSpellToFoundry(ISpell spell)
    {
        return new FoundryItem
        {
            Name = spell.Name,
            Type = "spell",
            System = new ItemSystem
            {
                Description = new FoundryDescriptionWrapper { Value = spell.Description ?? "" },
                Level = new FoundryValueWrapper { Value = spell.Level },
                School = new FoundryStringWrapper { Value = spell.School ?? "" },
                CastingTime = new FoundryStringWrapper { Value = spell.CastingTime ?? "" },
                Range = new FoundryStringWrapper { Value = spell.Range ?? "" },
                Duration = new FoundryStringWrapper { Value = spell.Duration ?? "" },
                Components = new FoundrySpellComponents
                {
                    Verbal = spell.Components.Verbal,
                    Somatic = spell.Components.Somatic,
                    Material = spell.Components.Material
                }
            }
        };
    }

    private static bool IsSpellItem(IItem item) => 
        item.ExtensionData.ContainsKey("FoundryType") && 
        item.ExtensionData["FoundryType"].ToString() == "spell";
}
