using TTRPGConverter.Core.Services;
using Microsoft.Extensions.Logging;
using System.Text.Json;

namespace TTRPGConverter.CLI.Commands;

/// <summary>
/// CLI command for converting between TTRPG formats
/// </summary>
public class ConvertCommand
{
    private readonly ILogger<ConvertCommand> _logger;
    private readonly IConversionPipeline _pipeline;

    public ConvertCommand(ILogger<ConvertCommand> logger, IConversionPipeline pipeline)
    {
        _logger = logger;
        _pipeline = pipeline;
    }

    public async Task<int> ExecuteAsync(string inputPath, string outputPath, string sourceFormat, string targetFormat)
    {
        try
        {
            _logger.LogInformation("Starting conversion: {SourceFormat} -> {TargetFormat}", sourceFormat, targetFormat);
            _logger.LogInformation("Input: {InputPath}", inputPath);
            _logger.LogInformation("Output: {OutputPath}", outputPath);

            // Validate input file exists
            if (!File.Exists(inputPath))
            {
                _logger.LogError("Input file not found: {InputPath}", inputPath);
                return 1;
            }

            // Read input JSON
            var inputJson = await File.ReadAllTextAsync(inputPath);
            _logger.LogDebug("Read {ByteCount} bytes from input file", inputJson.Length);

            // Perform conversion based on source/target formats
            string outputJson = (sourceFormat.ToLowerInvariant(), targetFormat.ToLowerInvariant()) switch
            {
                ("roll20", "foundry-pf2e") => await _pipeline.ConvertRoll20ToFoundryPF2eAsync(inputJson),
                ("foundry-pf2e", "roll20") => await _pipeline.ConvertFoundryPF2eToRoll20Async(inputJson),
                _ => throw new ArgumentException($"Unsupported conversion: {sourceFormat} -> {targetFormat}")
            };

            // Ensure output directory exists
            var outputDir = Path.GetDirectoryName(outputPath);
            if (!string.IsNullOrEmpty(outputDir) && !Directory.Exists(outputDir))
            {
                Directory.CreateDirectory(outputDir);
                _logger.LogDebug("Created output directory: {OutputDir}", outputDir);
            }

            // Write output JSON
            await File.WriteAllTextAsync(outputPath, outputJson);
            _logger.LogInformation("Conversion completed successfully");
            _logger.LogInformation("Output written to: {OutputPath}", outputPath);

            return 0;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Conversion failed");
            return 1;
        }
    }
}

/// <summary>
/// Static entry point for CLI conversion command
/// </summary>
public static class ConvertCommandRunner
{
    public static async Task<int> RunAsync(string[] args)
    {
        // Simple console logging for CLI
        using var loggerFactory = LoggerFactory.Create(builder =>
            builder.AddConsole().SetMinimumLevel(LogLevel.Information));
        
        var logger = loggerFactory.CreateLogger<ConvertCommand>();
        var pipelineLogger = loggerFactory.CreateLogger<ConversionPipeline>();
        
        var pipeline = new ConversionPipeline(pipelineLogger);
        var command = new ConvertCommand(logger, pipeline);

        // Parse command line arguments
        if (args.Length < 4)
        {
            Console.WriteLine("Usage: convert <input-file> <output-file> <source-format> <target-format>");
            Console.WriteLine();
            Console.WriteLine("Supported formats:");
            Console.WriteLine("  roll20        - Roll20 character sheet JSON");
            Console.WriteLine("  foundry-pf2e  - Foundry VTT PF2e actor JSON");
            Console.WriteLine();
            Console.WriteLine("Example:");
            Console.WriteLine("  convert character.json foundry-character.json roll20 foundry-pf2e");
            return 1;
        }

        var inputPath = args[0];
        var outputPath = args[1];
        var sourceFormat = args[2];
        var targetFormat = args[3];

        return await command.ExecuteAsync(inputPath, outputPath, sourceFormat, targetFormat);
    }
}
